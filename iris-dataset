{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":7331761,"sourceType":"datasetVersion","datasetId":4256104}],"dockerImageVersionId":30626,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-01-03T19:41:24.490321Z","iopub.execute_input":"2024-01-03T19:41:24.491318Z","iopub.status.idle":"2024-01-03T19:41:24.500662Z","shell.execute_reply.started":"2024-01-03T19:41:24.491267Z","shell.execute_reply":"2024-01-03T19:41:24.499568Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import warnings\nwarnings.filterwarnings(\"ignore\")\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","metadata":{"execution":{"iopub.status.busy":"2024-01-03T19:41:29.595290Z","iopub.execute_input":"2024-01-03T19:41:29.595654Z","iopub.status.idle":"2024-01-03T19:41:29.600736Z","shell.execute_reply.started":"2024-01-03T19:41:29.595628Z","shell.execute_reply":"2024-01-03T19:41:29.599934Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data = pd.read_csv('/kaggle/input/iris-dataset/Iris.csv')\ndata","metadata":{"execution":{"iopub.status.busy":"2024-01-03T19:41:34.994644Z","iopub.execute_input":"2024-01-03T19:41:34.995146Z","iopub.status.idle":"2024-01-03T19:41:35.015803Z","shell.execute_reply.started":"2024-01-03T19:41:34.995117Z","shell.execute_reply":"2024-01-03T19:41:35.014569Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data.head()","metadata":{"execution":{"iopub.status.busy":"2024-01-03T19:41:38.331869Z","iopub.execute_input":"2024-01-03T19:41:38.333104Z","iopub.status.idle":"2024-01-03T19:41:38.346380Z","shell.execute_reply.started":"2024-01-03T19:41:38.333072Z","shell.execute_reply":"2024-01-03T19:41:38.345235Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data=data.drop('Id',axis=1)\ndata.head()","metadata":{"execution":{"iopub.status.busy":"2024-01-03T19:41:41.439240Z","iopub.execute_input":"2024-01-03T19:41:41.439675Z","iopub.status.idle":"2024-01-03T19:41:41.451932Z","shell.execute_reply.started":"2024-01-03T19:41:41.439646Z","shell.execute_reply":"2024-01-03T19:41:41.450888Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data.shape","metadata":{"execution":{"iopub.status.busy":"2024-01-03T19:41:43.925040Z","iopub.execute_input":"2024-01-03T19:41:43.925676Z","iopub.status.idle":"2024-01-03T19:41:43.932130Z","shell.execute_reply.started":"2024-01-03T19:41:43.925640Z","shell.execute_reply":"2024-01-03T19:41:43.931337Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data.columns","metadata":{"execution":{"iopub.status.busy":"2024-01-03T19:41:46.211940Z","iopub.execute_input":"2024-01-03T19:41:46.212463Z","iopub.status.idle":"2024-01-03T19:41:46.217394Z","shell.execute_reply.started":"2024-01-03T19:41:46.212435Z","shell.execute_reply":"2024-01-03T19:41:46.216767Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data.info()","metadata":{"execution":{"iopub.status.busy":"2024-01-03T19:41:50.018991Z","iopub.execute_input":"2024-01-03T19:41:50.019330Z","iopub.status.idle":"2024-01-03T19:41:50.029192Z","shell.execute_reply.started":"2024-01-03T19:41:50.019305Z","shell.execute_reply":"2024-01-03T19:41:50.028055Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sns.pairplot(data[['SepalLengthCm', 'SepalWidthCm', 'PetalLengthCm', 'PetalWidthCm']])\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-01-03T19:41:53.128743Z","iopub.execute_input":"2024-01-03T19:41:53.129543Z","iopub.status.idle":"2024-01-03T19:41:56.687570Z","shell.execute_reply.started":"2024-01-03T19:41:53.129482Z","shell.execute_reply":"2024-01-03T19:41:56.686702Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sns.countplot(x='Species',data=data)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-01-03T19:42:01.373426Z","iopub.execute_input":"2024-01-03T19:42:01.373781Z","iopub.status.idle":"2024-01-03T19:42:01.487067Z","shell.execute_reply.started":"2024-01-03T19:42:01.373757Z","shell.execute_reply":"2024-01-03T19:42:01.485829Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.preprocessing import LabelEncoder","metadata":{"execution":{"iopub.status.busy":"2024-01-03T19:42:05.611538Z","iopub.execute_input":"2024-01-03T19:42:05.611888Z","iopub.status.idle":"2024-01-03T19:42:05.615639Z","shell.execute_reply.started":"2024-01-03T19:42:05.611861Z","shell.execute_reply":"2024-01-03T19:42:05.614990Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"enc = LabelEncoder()","metadata":{"execution":{"iopub.status.busy":"2024-01-03T19:42:08.355833Z","iopub.execute_input":"2024-01-03T19:42:08.357148Z","iopub.status.idle":"2024-01-03T19:42:08.362154Z","shell.execute_reply.started":"2024-01-03T19:42:08.357102Z","shell.execute_reply":"2024-01-03T19:42:08.360692Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data['Species'] = enc.fit_transform(data['Species'])\ndata.head()","metadata":{"execution":{"iopub.status.busy":"2024-01-03T19:42:10.918311Z","iopub.execute_input":"2024-01-03T19:42:10.918700Z","iopub.status.idle":"2024-01-03T19:42:10.931765Z","shell.execute_reply.started":"2024-01-03T19:42:10.918673Z","shell.execute_reply":"2024-01-03T19:42:10.930628Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data['Species'].unique()","metadata":{"execution":{"iopub.status.busy":"2024-01-03T19:42:14.198911Z","iopub.execute_input":"2024-01-03T19:42:14.199397Z","iopub.status.idle":"2024-01-03T19:42:14.204636Z","shell.execute_reply.started":"2024-01-03T19:42:14.199373Z","shell.execute_reply":"2024-01-03T19:42:14.203948Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data['Species']=pd.factorize(data['Species'])[0]\ndata","metadata":{"execution":{"iopub.status.busy":"2024-01-03T19:42:17.155654Z","iopub.execute_input":"2024-01-03T19:42:17.156328Z","iopub.status.idle":"2024-01-03T19:42:17.174250Z","shell.execute_reply.started":"2024-01-03T19:42:17.156299Z","shell.execute_reply":"2024-01-03T19:42:17.173199Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sns.distplot(data['Species'], hist = False, kde = True, kde_kws = {'shade': True, 'linewidth': 3})\nplt.xlabel(\"count\")\nplt.ylabel(\"Density\")\nplt.title(\"Density of price\")\nplt.legend(\"Price\")\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-01-03T19:42:20.449335Z","iopub.execute_input":"2024-01-03T19:42:20.449733Z","iopub.status.idle":"2024-01-03T19:42:20.732285Z","shell.execute_reply.started":"2024-01-03T19:42:20.449702Z","shell.execute_reply":"2024-01-03T19:42:20.730902Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y = data.Species\ndata.drop(['Species'], axis=1, inplace=True)\nx = data","metadata":{"execution":{"iopub.status.busy":"2024-01-03T19:42:24.849453Z","iopub.execute_input":"2024-01-03T19:42:24.849979Z","iopub.status.idle":"2024-01-03T19:42:24.855285Z","shell.execute_reply.started":"2024-01-03T19:42:24.849954Z","shell.execute_reply":"2024-01-03T19:42:24.854406Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\n\n# Assuming 'x' and 'y' are your data arrays or DataFrames\nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score","metadata":{"execution":{"iopub.status.busy":"2024-01-03T19:56:43.211741Z","iopub.execute_input":"2024-01-03T19:56:43.212094Z","iopub.status.idle":"2024-01-03T19:56:43.219796Z","shell.execute_reply.started":"2024-01-03T19:56:43.212067Z","shell.execute_reply":"2024-01-03T19:56:43.218638Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)","metadata":{"execution":{"iopub.status.busy":"2024-01-03T19:56:45.184748Z","iopub.execute_input":"2024-01-03T19:56:45.185129Z","iopub.status.idle":"2024-01-03T19:56:45.192367Z","shell.execute_reply.started":"2024-01-03T19:56:45.185100Z","shell.execute_reply":"2024-01-03T19:56:45.190917Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df = LogisticRegression()\ndf.fit(X_train,y_train)","metadata":{"execution":{"iopub.status.busy":"2024-01-03T19:56:59.953640Z","iopub.execute_input":"2024-01-03T19:56:59.953955Z","iopub.status.idle":"2024-01-03T19:56:59.978635Z","shell.execute_reply.started":"2024-01-03T19:56:59.953930Z","shell.execute_reply":"2024-01-03T19:56:59.977465Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y_pred = df.predict(X_test)\n\n# Evaluate the model's performance\naccuracy = accuracy_score(y_test, y_pred)\nprint(\"Accuracy: \", accuracy)","metadata":{"execution":{"iopub.status.busy":"2024-01-03T19:57:03.038577Z","iopub.execute_input":"2024-01-03T19:57:03.039176Z","iopub.status.idle":"2024-01-03T19:57:03.046989Z","shell.execute_reply.started":"2024-01-03T19:57:03.039149Z","shell.execute_reply":"2024-01-03T19:57:03.045950Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import joblib\njoblib.dump(df, \"IrisFlowerClassification.pkl\")","metadata":{"execution":{"iopub.status.busy":"2024-01-03T19:59:18.488656Z","iopub.execute_input":"2024-01-03T19:59:18.488969Z","iopub.status.idle":"2024-01-03T19:59:18.498072Z","shell.execute_reply.started":"2024-01-03T19:59:18.488946Z","shell.execute_reply":"2024-01-03T19:59:18.497060Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}